# Tennis Predictor Development Rules

## Project Structure
- Raw data must be stored in the `data/` directory
- All prediction-related scripts must be in the `predictor/` directory
- All database related scripts and information must be in the `database/` directory
- Versions of each are stored in the appropriate version number, for example version 3 is v3 folders etc
- Refer to the `database/schema.py` file for database tables and columns structure. If we make changes to the database, ensure you update this file

## Code Style and Type Safety
- No `@staticmethod` decorators allowed
- Prefer functional programming over OOP when possible

## Dependencies
- Use `requirements.txt` for dependency management
- If runnings commands, always ensure you are using the virtual environment: .venv located in the root of the project
- Use latest versions of packages

## Error Handling
- All functions must include proper error handling
- Use try-except blocks where appropriate
- Raise specific exceptions with meaningful messages
- Log errors appropriately

## Data Processing
- All data processing functions must handle missing values explicitly
- Data validation must be performed using Pydantic models
- Raw data should not be modified - create new processed datasets instead

## Code Organization
- Keep functions small and focused
- Use descriptive variable names
- Group related functions together
- Avoid global variables

## File Naming
- Use snake_case for all Python files
- Use descriptive names that indicate the file's purpose
- Group related files with similar prefixes

## Comments and Code Clarity
- Add comments for complex logic
- Use type hints to improve code readability
- Break down complex operations into smaller, well-named functions

## Function Design
- Functions should have a single responsibility
- Use pure functions when possible
- Return new objects instead of modifying existing ones
- Use type hints for all parameters and return values

## Example Type Annotations
```python
# Variable declarations
player_names: list[str] = ["Player1", "Player2"]
match_scores: dict[str, int] = {"Player1": 6, "Player2": 4}
